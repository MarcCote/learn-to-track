#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys

# Hack so you don't have to put the library containing this script in the PYTHONPATH.
sys.path = [os.path.abspath(os.path.join(__file__, '..', '..'))] + sys.path

import numpy as np
from os.path import join as pjoin
import argparse
import itertools
import theano
import time
from nibabel.streamlines import ArraySequence

from smartlearner import utils as smartutils

from learn2track.utils import Timer, log_variables
from learn2track.factories import model_factory
from learn2track.factories import loss_factory

from learn2track import datasets
from learn2track import utils
from learn2track.batch_schedulers import TractographyBatchScheduler
from learn2track.neurotools import VolumeManager


def build_parser():
    DESCRIPTION = ("Report the reconstruction error of a GRU model on a dataset of streamlines coordinates and DWIs.")
    p = argparse.ArgumentParser(description=DESCRIPTION)

    # General options (optional)
    p.add_argument('name', type=str, help='name/path of the experiment.')
    p.add_argument('--subjects', nargs='+', required=True,
                   help='file containing validation data (as generated by `process_streamlines.py`).')
    p.add_argument('--dataset-name', default="validset",
                   help='name to use when saving the results. Default: %(default)s')
    p.add_argument('--batch_size', type=int, default=100,
                   help='size of the batch.')

    p.add_argument('-f', '--force', action='store_true', help='restart training from scratch instead of resuming.')
    return p


def get_regression_results(model, dataset, batch_size):
    loss = L2DistanceForSequences(model, dataset)
    batch_scheduler = StreamlinesBatchScheduler(dataset, batch_size=batch_size,
                                                # patch_shape=args.neighborhood_patch,
                                                noisy_streamlines_sigma=None,
                                                nb_updates_per_epoch=None,
                                                seed=1234)

    loss.losses  # Hack to generate update dict in loss :(
    losses, masks = log_variables(batch_scheduler, loss.L2_error_per_item, dataset.symb_mask*1)

    timesteps_loss = ArraySequence([l[:int(m.sum())] for l, m in zip(losses, masks)])
    sequences_mean_loss = np.array([l.mean() for l in timesteps_loss])

    results = {"type": "L2",
               "timesteps_loss_sum": float(timesteps_loss._data.sum()),
               "timesteps_loss_avg": float(timesteps_loss._data.mean()),
               "timesteps_loss_std": float(timesteps_loss._data.std()),
               "sequences_mean_loss_avg": float(sequences_mean_loss.mean()),
               "sequences_mean_loss_stderr": float(sequences_mean_loss.std(ddof=1)/np.sqrt(len(sequences_mean_loss)))}

    return results


def batch_get_regression_results(model, dataset, batch_size=None):
    if batch_size is None:
        batch_size = len(dataset)

    while True:
        try:
            time.sleep(1)
            print("Trying to evaluate {:,} streamlines at the same time.".format(batch_size))
            return get_regression_results(model, dataset, batch_size), batch_size

        except MemoryError:
            print("{:,} streamlines is too much!".format(batch_size))
            batch_size //= 2
            if batch_size < 0:
                raise MemoryError("Might needs a bigger graphic card!")

        except OSError as e:
            if "allocate memory" in e.args[0]:
                print("{:,} streamlines is too much!".format(batch_size))
                batch_size //= 2
                if batch_size < 0:
                    raise MemoryError("Might needs a bigger graphic card!")

            else:
                raise e

        except RuntimeError as e:
            if "out of memory" in e.args[0] or "allocation failed" in e.args[0]:
                print("{:,} streamlines is too much!".format(batch_size))
                batch_size //= 2
                if batch_size < 0:
                    raise MemoryError("Might needs a bigger graphic card!")

            else:
                raise e


def main():
    parser = build_parser()
    args = parser.parse_args()
    print(args)

    # Get experiment folder
    experiment_path = args.name
    if not os.path.isdir(experiment_path):
        # If not a directory, it must be the name of the experiment.
        experiment_path = pjoin(".", "experiments", args.name)

    if not os.path.isdir(experiment_path):
        parser.error('Cannot find experiment: {0}!'.format(args.name))

    # Load experiments hyperparameters
    try:
        hyperparams = smartutils.load_dict_from_json_file(pjoin(experiment_path, "hyperparams.json"))
    except FileNotFoundError:
        hyperparams = smartutils.load_dict_from_json_file(pjoin(experiment_path, "..", "hyperparams.json"))


    with Timer("Loading dataset", newline=True):
        volume_manager = VolumeManager()
        dataset = datasets.load_tractography_dataset(args.subjects, volume_manager, name="dataset", use_sh_coeffs=hyperparams['use_sh_coeffs'])
        print("Dataset size:", len(dataset))

    with Timer("Loading model"):
        if hyperparams['model'] == 'gru_regression':
            from learn2track.models import GRU_Regression
            GRU_Regression.create(experiment_path, volume_manager=volume_manager)
        else:
            raise NameError("Unknown model: {}".format(hyperparams['model']))

    with Timer("Building evaluation function"):
        loss = loss_factory(hyperparams, model, dataset)
        batch_scheduler = TractographyBatchScheduler(dataset,
                                                     batch_size=args.batch_size,
                                                     noisy_streamlines_sigma=None,
                                                     seed=1234,
                                                     shuffle_streamlines=False,
                                                     normalize_target=hyperparams['normalize'])

        l2_error = views.LossView(loss=loss, batch_scheduler=batch_scheduler)

    with Timer("Evaluating...", newline=True):
        results_file = pjoin(experiment_path, "results.json")
        results = {}
        if os.path.isfile(results_file) and not args.force:
            print("Loading saved results... (use --force to re-run evaluation)")
            results = smartutils.load_dict_from_json_file(results_file)

        entry = args.dataset_name + "_L2_error"

        if entry not in results or args.force:
            with Timer("Evaluating L2 error on {}".format(args.dataset_name)):
                dummy_status = Status()  # Forces recomputing results
                results[entry] = {'mean': float(l2_error.mean.view(dummy_status)),
                                  'stderror': float(l2_error.stderror.view(dummy_status))}
                smartutils.save_dict_to_json_file(results_file, results)  # Update results file.

        print("{}: {:.4f} Â± {:.4f}".format(entry, results[entry]['mean'], results[entry]['stderror']))


if __name__ == "__main__":
    main()
