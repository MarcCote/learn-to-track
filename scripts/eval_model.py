#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os

# # Hack so you don't have to put the library containing this script in the PYTHONPATH.
# sys.path = [os.path.abspath(os.path.join(__file__, '..', '..'))] + sys.path

from os.path import join as pjoin
import argparse

from smartlearner import views
from smartlearner.status import Status
from smartlearner import utils as smartutils

from learn2track.utils import Timer
from learn2track.factories import loss_factory

from learn2track import datasets
from learn2track.batch_schedulers import TractographyBatchScheduler, MultistepSequenceBatchScheduler
from learn2track.neurotools import VolumeManager


def build_parser():
    DESCRIPTION = ("Report the reconstruction error of a GRU model on a dataset of streamlines coordinates and DWIs.")
    p = argparse.ArgumentParser(description=DESCRIPTION)

    # General options (optional)
    p.add_argument('name', type=str, help='name/path of the experiment.')
    p.add_argument('--subjects', nargs='+', required=True,
                   help='file containing validation data (as generated by `process_streamlines.py`).')
    p.add_argument('--dataset-name', default="validset",
                   help='name to use when saving the results. Default: %(default)s')
    p.add_argument('--batch_size', type=int, default=100,
                   help='size of the batch.')

    p.add_argument('-f', '--force', action='store_true', help='restart training from scratch instead of resuming.')
    return p


def main():
    parser = build_parser()
    args = parser.parse_args()
    print(args)

    # Get experiment folder
    experiment_path = args.name
    if not os.path.isdir(experiment_path):
        # If not a directory, it must be the name of the experiment.
        experiment_path = pjoin(".", "experiments", args.name)

    if not os.path.isdir(experiment_path):
        parser.error('Cannot find experiment: {0}!'.format(args.name))

    # Load experiments hyperparameters
    try:
        hyperparams = smartutils.load_dict_from_json_file(pjoin(experiment_path, "hyperparams.json"))
    except FileNotFoundError:
        hyperparams = smartutils.load_dict_from_json_file(pjoin(experiment_path, "..", "hyperparams.json"))


    with Timer("Loading dataset", newline=True):
        volume_manager = VolumeManager()
        dataset = datasets.load_tractography_dataset(args.subjects, volume_manager, name="dataset", use_sh_coeffs=hyperparams['use_sh_coeffs'])
        print("Dataset size:", len(dataset))

    with Timer("Loading model"):
        if hyperparams['model'] == 'gru_regression':
            from learn2track.models import GRU_Regression
            model = GRU_Regression.create(experiment_path, volume_manager=volume_manager)
        elif hyperparams['model'] == 'gru_mixture':
            from learn2track.models import GRU_Mixture
            model = GRU_Mixture.create(experiment_path, volume_manager=volume_manager)
        elif hyperparams['model'] == 'gru_multistep':
            from learn2track.models import GRU_Multistep_Gaussian
            model = GRU_Multistep_Gaussian.create(experiment_path, volume_manager=volume_manager)
            model.k = 1
            model.m = 1
        else:
            raise NameError("Unknown model: {}".format(hyperparams['model']))

    with Timer("Building evaluation function"):
        if hyperparams['model'] == 'gru_multistep':
            batch_scheduler = MultistepSequenceBatchScheduler(dataset,
                                                              batch_size=args.batch_size,
                                                              k=1,
                                                              noisy_streamlines_sigma=None,
                                                              seed=1234,
                                                              normalize_target=False,
                                                              shuffle_streamlines=False)
        else:
            batch_scheduler = TractographyBatchScheduler(dataset,
                                                         batch_size=args.batch_size,
                                                         noisy_streamlines_sigma=None,
                                                         seed=1234,
                                                         shuffle_streamlines=False,
                                                         normalize_target=hyperparams['normalize'])

        loss = loss_factory(hyperparams, model, dataset, use_expected_value=True)
        l2_error = views.LossView(loss=loss, batch_scheduler=batch_scheduler)

    with Timer("Evaluating...", newline=True):
        results_file = pjoin(experiment_path, "results.json")
        results = {}
        if os.path.isfile(results_file) and not args.force:
            print("Loading saved results... (use --force to re-run evaluation)")
            results = smartutils.load_dict_from_json_file(results_file)

        entry = args.dataset_name + "_L2_error"

        if entry not in results or args.force:
            with Timer("Evaluating L2 error on {}".format(args.dataset_name)):
                dummy_status = Status()  # Forces recomputing results
                results[entry] = {'mean': float(l2_error.mean.view(dummy_status)),
                                  'stderror': float(l2_error.stderror.view(dummy_status))}
                smartutils.save_dict_to_json_file(results_file, results)  # Update results file.

        print("{}: {:.4f} Â± {:.4f}".format(entry, results[entry]['mean'], results[entry]['stderror']))


if __name__ == "__main__":
    main()
